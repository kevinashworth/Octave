import { registerComponent } from "meteor/vulcan:core";
import React, { PureComponent } from 'react';
import {
  ButtonDropdown,
  CustomInput,
  DropdownItem,
  DropdownMenu,
  DropdownToggle,
} from 'reactstrap';
import styled from 'styled-components';
import withFilters from '../../../modules/withFilters.js';

// DropdownItemStatic: I simply copied pertinent-seeming styles generated by a DropdownItem, but there is no "flash" when you click
const DropdownItemStatic = styled.div`
  border-bottom: 1px solid #c2cfd6;
  padding: 10px 20px;
  white-space: nowrap;
`;

class ProjectFiltersWrapped extends PureComponent {
  constructor(props) {
    super(props);

    this.toggle = this.toggle.bind(this);
    this.handleClick = this.handleClick.bind(this);
    this.handleInputChange = this.handleInputChange.bind(this);
    this.handleOptionChange = this.handleOptionChange.bind(this);
    this.state = {
      dropdownOpen: new Array(3).fill(false),
    };
  }

  toggle(i) {
    const newArray = this.state.dropdownOpen.map((element, index) => { return (index === i ? !element : false); });
    this.setState({
      dropdownOpen: newArray
    });
  }

  handleInputChange(event) {
    const i = parseInt(event.target.id, 10);
    if (event.target.name === 'projectType')
      this.props.actions.toggleProjectTypeFilter(i);
    if (event.target.name === 'projectStatus')
      this.props.actions.toggleProjectStatusFilter(i);
  }

  // this happens to handle the Do Not Filter link as empty string, which should work
  handleOptionChange(event) {
    // eslint-disable-next-line no-console
    console.log('handleOptionChange:', event.target.id);
    this.setState({
      filterProjectsByLastUpdated: event.target.id
    });
    // this.context.updateCurrentValues({ filterProjectsByLastUpdated: event.target.id });
  }

  handleClick(event) {
    // eslint-disable-next-line no-console
    console.info('handleClick: An event was triggered: ', event.target);
    const i = event.target.id;
    this.props.toggleProjectTypeFilter(i);
  }

  render() {
    return (
      <div className="float-right">
        <ButtonDropdown className="ml-2" isOpen={this.state.dropdownOpen[0]} toggle={() => {this.toggle(0)}}>
          <DropdownToggle caret>
            Type
          </DropdownToggle>
          <DropdownMenu>
            <DropdownItem header>Filter projects by type</DropdownItem>
            <DropdownItemStatic>
              {this.props.projectTypeFilters.map((project, index) =>
                <CustomInput type="checkbox" name="projectType"
                  id={`${index}-type`} key={`${project.projectType}`} label={`${project.projectType}`}
                  checked={project.value} onChange={this.handleInputChange} />
              )}
            </DropdownItemStatic>
            <DropdownItem toggle={false}><a href="#" size="sm" color="primary">Show All</a></DropdownItem>
          </DropdownMenu>
        </ButtonDropdown>
        <ButtonDropdown className="ml-2" isOpen={this.state.dropdownOpen[1]} toggle={() => {this.toggle(1)}}>
          <DropdownToggle caret>
            Last updated
          </DropdownToggle>
          <DropdownMenu>
            <DropdownItem header>Filter projects by last updated</DropdownItem>
            <DropdownItemStatic>
              {/* <CustomInput type="radio" name="lastupdated" id="filterProjectsByLastUpdatedOneDay" label="One Day"
                checked={this.state.filterProjectsByLastUpdated === 'filterProjectsByLastUpdatedOneDay'} onChange={this.handleOptionChange} />
              <CustomInput type="radio" name="lastupdated" id="filterProjectsByLastUpdatedOneWeek" label="One Week"
                checked={this.state.filterProjectsByLastUpdated === 'filterProjectsByLastUpdatedOneWeek'} onChange={this.handleOptionChange} />
              <CustomInput type="radio" name="lastupdated" id="filterProjectsByLastUpdatedTwoWeeks" label="Two Weeks"
                checked={this.state.filterProjectsByLastUpdated === 'filterProjectsByLastUpdatedTwoWeeks'} onChange={this.handleOptionChange} />
              <CustomInput type="radio" name="lastupdated" id="filterProjectsByLastUpdatedOneMonth" label="One Month"
                checked={this.state.filterProjectsByLastUpdated === 'filterProjectsByLastUpdatedOneMonth'} onChange={this.handleOptionChange} />
              <CustomInput type="radio" name="lastupdated" id="filterProjectsByLastUpdatedTwoMonths" label="Two Months"
                checked={this.state.filterProjectsByLastUpdated === 'filterProjectsByLastUpdatedTwoMonths'} onChange={this.handleOptionChange} />
              <CustomInput type="radio" name="lastupdated" id="filterProjectsByLastUpdatedOneYear" label="One Year"
                checked={this.state.filterProjectsByLastUpdated === 'filterProjectsByLastUpdatedOneYear'} onChange={this.handleOptionChange} /> */}
            </DropdownItemStatic>
            <DropdownItem toggle={false}><a onClick={this.handleOptionChange}>Do Not Filter by Last Updated</a></DropdownItem>
          </DropdownMenu>
        </ButtonDropdown>
        <ButtonDropdown className="ml-2" isOpen={this.state.dropdownOpen[2]} toggle={() => {this.toggle(2)}}>
          <DropdownToggle caret>
            Status
          </DropdownToggle>
          <DropdownMenu>
            <DropdownItem header>Filter projects by status</DropdownItem>
            <DropdownItemStatic>
              {this.props.projectStatusFilters.map((project, index) =>
                <CustomInput type="checkbox" name="projectStatus"
                  id={`${index}-status`} key={`${project.projectStatus}`} label={`${project.projectStatus}`}
                  checked={project.value} onChange={this.handleInputChange} />
              )}
            </DropdownItemStatic>
            {/* <DropdownItem header>Inactive</DropdownItem>
            <DropdownItemStatic>
              <CustomInput type="checkbox" id="filterProjectsByStatusWrapped" label="Wrapped"
                checked={this.state.filterProjectsByStatusWrapped} onChange={this.handleInputChange} />
              <CustomInput type="checkbox" id="filterProjectsByStatusCanceled" label="Canceled"
                checked={this.state.filterProjectsByStatusCanceled} onChange={this.handleInputChange} />
            </DropdownItemStatic> */}
          </DropdownMenu>
        </ButtonDropdown>
      </div>
    );
  }
}

registerComponent('ProjectFiltersWrapped', ProjectFiltersWrapped, withFilters);
