import { registerComponent } from 'meteor/vulcan:core'
import React, { PureComponent } from 'react'
import {
  ButtonDropdown,
  CustomInput,
  DropdownItem,
  DropdownMenu,
  DropdownToggle
} from 'reactstrap'
import styled from 'styled-components'
import withFilters from '../../../modules/hocs/withFilters.js'

// DropdownItemStatic: I simply copied pertinent-seeming styles generated by a DropdownItem, but there is no "flash" when you click
const DropdownItemStatic = styled.div`
  border-bottom: 1px solid #c2cfd6;
  padding: 10px 20px;
  white-space: nowrap;
`

// Set initial state. Just options I want to keep.
// See https://github.com/amannn/react-keep-state
let keptState = {
  typeColor: 'secondary',
  updatedColor: 'secondary',
  statusColor: 'secondary'
}

class PastProjectFilters extends PureComponent {
  constructor (props) {
    super(props)

    this.toggle = this.toggle.bind(this)
    this.handleClickProjectType = this.handleClickProjectType.bind(this)
    this.handleClickProjectStatus = this.handleClickProjectStatus.bind(this)
    this.handleChange = this.handleChange.bind(this)
    this.state = {
      dropdownOpen: new Array(3).fill(false),

      // Retrieve the last state
      ...keptState
    }
  }

  componentWillUnmount () {
    // Remember state for the next mount
    keptState = {
      typeColor: this.state.typeColor,
      updatedColor: this.state.updatedColor,
      statusColor: this.state.statusColor
    }
  }

  toggle (i) {
    const newArray = this.state.dropdownOpen.map((element, index) => { return (index === i ? !element : false) })
    this.setState({
      dropdownOpen: newArray
    })
  }

  handleChange (event) {
    const i = parseInt(event.target.id, 10)
    if (event.target.name === 'project-type') {
      this.props.actions.togglePastProjectTypeFilter(i)
      this.setState({ typeColor: 'danger' })
    }
    if (event.target.name === 'project-updated') {
      const all = event.target.labels[0].innerHTML.indexOf('All') !== -1
      this.props.actions.togglePastProjectUpdatedFilter(i)
      if (all) {
        this.setState({ updatedColor: 'secondary' })
      } else {
        this.setState({ updatedColor: 'danger' })
      }
    }
    if (event.target.name === 'project-status') {
      this.props.actions.togglePastProjectStatusFilter(i)
      this.setState({ statusColor: 'danger' })
    }
  }

  handleClickProjectType (event) {
    const all = event.target.innerHTML.indexOf('All') !== -1
    const none = event.target.innerHTML.indexOf('None') !== -1
    const toggle = event.target.innerHTML.indexOf('Toggle') !== -1
    const length = this.props.pastProjectTypeFilters.length
    if (toggle) {
      for (let i = 0; i < length; i++) {
        this.props.actions.togglePastProjectTypeFilter(i)
      }
    } else { // for All and for None
      for (let i = 0; i < length; i++) {
        if ((this.props.pastProjectTypeFilters[i].value && none) || (!this.props.pastProjectTypeFilters[i].value && !none)) {
          this.props.actions.togglePastProjectTypeFilter(i)
        }
      }
    }
    if (all) {
      this.setState({ typeColor: 'secondary' })
    }
    if (none) {
      this.setState({ typeColor: 'danger' })
    }
  }

  // TODO: DRY these two handlers above and below this line

  handleClickProjectStatus (event) {
    const all = event.target.innerHTML.indexOf('All') !== -1
    const none = event.target.innerHTML.indexOf('None') !== -1
    const active = event.target.innerHTML.indexOf('Active') !== -1
    const toggle = event.target.innerHTML.indexOf('Toggle') !== -1
    const length = this.props.pastProjectStatusFilters.length
    if (toggle) {
      for (let i = 0; i < length; i++) {
        this.props.actions.togglePastProjectStatusFilter(i)
      }
    } else if (active) {
      let i
      for (i = 0; i < length - 4; i++) { // Canceled, Wrapped, Unknown, Relocated are not considered Active
        this.props.actions.setPastProjectStatusFilter(i)
      }
      for (; i < length; i++) {
        this.props.actions.clearPastProjectStatusFilter(i)
      }
      this.setState({ statusColor: 'primary' })
    } else { // for All and for None
      for (let i = 0; i < length; i++) {
        if ((this.props.pastProjectStatusFilters[i].value && none) || (!this.props.pastProjectStatusFilters[i].value && !none)) {
          this.props.actions.togglePastProjectStatusFilter(i)
        }
      }
    }
    if (all) {
      this.setState({ statusColor: 'secondary' })
    }
    if (none) {
      this.setState({ statusColor: 'danger' })
    }
  }

  render () {
    return (
      <div className='float-right'>
        <ButtonDropdown className='ml-2' isOpen={this.state.dropdownOpen[0]} toggle={() => { this.toggle(0) }}>
          <DropdownToggle caret color={this.state.typeColor}>
            Type
          </DropdownToggle>
          <DropdownMenu>
            <DropdownItem header>Filter projects by type</DropdownItem>
            <DropdownItemStatic>
              {this.props.pastProjectTypeFilters.map((project, index) =>
                <CustomInput type='checkbox' name='project-type'
                  id={`${index}-type`} key={`${project.projectType}`} label={`${project.projectType}`}
                  checked={project.value} onChange={this.handleChange} />
              )}
            </DropdownItemStatic>
            <DropdownItem onClick={this.handleClickProjectType} toggle={false}>All</DropdownItem>
            <DropdownItem onClick={this.handleClickProjectType} toggle={false}>None</DropdownItem>
            <DropdownItem onClick={this.handleClickProjectType} toggle={false}>Toggle</DropdownItem>
          </DropdownMenu>
        </ButtonDropdown>
        <ButtonDropdown className='ml-2' isOpen={this.state.dropdownOpen[1]} toggle={() => { this.toggle(1) }}>
          <DropdownToggle caret color={this.state.updatedColor}>
            Last updated
          </DropdownToggle>
          <DropdownMenu>
            <DropdownItem header>Filter projects by last updated</DropdownItem>
            <DropdownItemStatic>
              {this.props.pastProjectUpdatedFilters.map((filter, index) =>
                <CustomInput type='radio' name='project-updated'
                  id={`${index}-updated`} key={`${filter.projectUpdated}`} label={`${filter.projectUpdated}`}
                  checked={filter.value} onChange={this.handleChange} />
              )}
            </DropdownItemStatic>
          </DropdownMenu>
        </ButtonDropdown>
        <ButtonDropdown className='ml-2' isOpen={this.state.dropdownOpen[2]} toggle={() => { this.toggle(2) }}>
          <DropdownToggle caret color={this.state.statusColor}>
            Status
          </DropdownToggle>
          <DropdownMenu>
            <DropdownItem header>Filter projects by status</DropdownItem>
            <DropdownItemStatic>
              {this.props.pastProjectStatusFilters.map((project, index) =>
                <CustomInput type='checkbox' name='project-status'
                  id={`${index}-status`} key={`${project.pastProjectStatus}`} label={`${project.pastProjectStatus}`}
                  checked={project.value} onChange={this.handleChange} />
              )}
            </DropdownItemStatic>
            <DropdownItem onClick={this.handleClickProjectStatus} toggle={false}>All</DropdownItem>
            <DropdownItem onClick={this.handleClickProjectStatus} toggle={false}>Active</DropdownItem>
            <DropdownItem onClick={this.handleClickProjectStatus} toggle={false}>None</DropdownItem>
            <DropdownItem onClick={this.handleClickProjectStatus} toggle={false}>Toggle</DropdownItem>
          </DropdownMenu>
        </ButtonDropdown>
      </div>
    )
  }
}

registerComponent('PastProjectFilters', PastProjectFilters, withFilters)
